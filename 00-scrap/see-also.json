{
  "cljs.core/def": [
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "defn",
      "arglists_comp": "[name doc-string? attr-map? [params*] body]|[name doc-string? attr-map? ([params*] body) + attr-map?]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "fn",
      "arglists_comp": "[& sigs]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "defmacro",
      "arglists_comp": "[name doc-string? attr-map? [params*] body]|[name doc-string? attr-map? ([params*] body) + attr-map?]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "defmulti",
      "arglists_comp": "[name docstring? attr-map? dispatch-fn & options]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/defn": [
    {
      "namespace": "cljs.core",
      "weight": 4,
      "name": "def",
      "arglists_comp": "",
      "file": null
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "defn-",
      "arglists_comp": "[name & decls]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "defmacro",
      "arglists_comp": "[name doc-string? attr-map? [params*] body]|[name doc-string? attr-map? ([params*] body) + attr-map?]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "fn",
      "arglists_comp": "[& sigs]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/defn-": [
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "defn",
      "arglists_comp": "[name doc-string? attr-map? [params*] body]|[name doc-string? attr-map? ([params*] body) + attr-map?]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/let": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "letfn",
      "arglists_comp": "[fnspecs & body]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "if-let",
      "arglists_comp": "[bindings then]|[bindings then else & oldform]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/declare": [
    {
      "namespace": "cljs.core",
      "weight": 4,
      "name": "def",
      "arglists_comp": "",
      "file": null
    }
  ],
  "cljs.core/ns": [
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "use",
      "arglists_comp": "[& args]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 4,
      "name": "require",
      "arglists_comp": "[& args]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "refer",
      "arglists_comp": "[ns-sym & filters]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "import",
      "arglists_comp": "[& import-symbols-or-lists]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "ns-publics",
      "arglists_comp": "[ns]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "in-ns",
      "arglists_comp": "[name]",
      "file": null
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "remove-ns",
      "arglists_comp": "[sym]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "ns-map",
      "arglists_comp": "[ns]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "*ns*",
      "arglists_comp": "",
      "file": null
    }
  ],
  "cljs.core/if": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "cond",
      "arglists_comp": "[& clauses]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "when",
      "arglists_comp": "[test & body]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "if-let",
      "arglists_comp": "[bindings then]|[bindings then else & oldform]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "if-not",
      "arglists_comp": "[test then]|[test then else]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/if-not": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "if",
      "arglists_comp": "",
      "file": null
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "when-not",
      "arglists_comp": "[test & body]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/when": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "when-not",
      "arglists_comp": "[test & body]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "when-let",
      "arglists_comp": "[bindings & body]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "if",
      "arglists_comp": "",
      "file": null
    }
  ],
  "cljs.core/when-not": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "when",
      "arglists_comp": "[test & body]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "when-let",
      "arglists_comp": "[bindings & body]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "if",
      "arglists_comp": "",
      "file": null
    }
  ],
  "cljs.core/when-let": [
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "if-let",
      "arglists_comp": "[bindings then]|[bindings then else & oldform]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "when",
      "arglists_comp": "[test & body]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "when-not",
      "arglists_comp": "[test & body]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "if",
      "arglists_comp": "",
      "file": null
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "when-first",
      "arglists_comp": "[bindings & body]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/when-first": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "when-let",
      "arglists_comp": "[bindings & body]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/if-let": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "when-let",
      "arglists_comp": "[bindings & body]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "if",
      "arglists_comp": "",
      "file": null
    }
  ],
  "cljs.core/cond": [
    {
      "namespace": "cljs.core",
      "weight": 4,
      "name": "condp",
      "arglists_comp": "[pred expr & clauses]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "case",
      "arglists_comp": "[e & clauses]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "if",
      "arglists_comp": "",
      "file": null
    }
  ],
  "cljs.core/condp": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "cond",
      "arglists_comp": "[& clauses]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "if",
      "arglists_comp": "",
      "file": null
    }
  ],
  "cljs.core/case": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "cond",
      "arglists_comp": "[& clauses]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 4,
      "name": "condp",
      "arglists_comp": "[pred expr & clauses]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/when-some": null,
  "cljs.core/if-some": null,
  "cljs.core/and": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "or",
      "arglists_comp": "[]|[x]|[x & next]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "if",
      "arglists_comp": "",
      "file": null
    }
  ],
  "cljs.core/or": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "and",
      "arglists_comp": "[]|[x]|[x & next]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "if",
      "arglists_comp": "",
      "file": null
    }
  ],
  "cljs.core/map": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "map-indexed",
      "arglists_comp": "[f coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "pmap",
      "arglists_comp": "[f coll]|[f coll & colls]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "amap",
      "arglists_comp": "[a idx ret expr]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "mapcat",
      "arglists_comp": "[f & colls]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "keep",
      "arglists_comp": "[f coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 4,
      "name": "juxt",
      "arglists_comp": "[f]|[f g]|[f g h]|[f g h & fs]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/map-indexed": [
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "map",
      "arglists_comp": "[f coll]|[f c1 c2]|[f c1 c2 c3]|[f c1 c2 c3 & colls]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "keep-indexed",
      "arglists_comp": "[f coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/reduce": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "reductions",
      "arglists_comp": "[f coll]|[f init coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 6,
      "name": "apply",
      "arglists_comp": "[f args* argseq]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "frequencies",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/for": [
    {
      "namespace": "cljs.core",
      "weight": 5,
      "name": "doseq",
      "arglists_comp": "[seq-exprs & body]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "doall",
      "arglists_comp": "[coll]|[n coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "recur",
      "arglists_comp": "",
      "file": null
    }
  ],
  "cljs.core/doseq": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "doall",
      "arglists_comp": "[coll]|[n coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "dorun",
      "arglists_comp": "[coll]|[n coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 6,
      "name": "for",
      "arglists_comp": "[seq-exprs body-expr]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "dotimes",
      "arglists_comp": "[bindings & body]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/dotimes": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "repeat",
      "arglists_comp": "[x]|[n x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 6,
      "name": "for",
      "arglists_comp": "[seq-exprs body-expr]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 5,
      "name": "doseq",
      "arglists_comp": "[seq-exprs & body]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/while": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "loop",
      "arglists_comp": "[bindings & body]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/true?": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "false?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/false?": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "not",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/instance?": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "type",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "supers",
      "arglists_comp": "[class]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "doto",
      "arglists_comp": "[x & forms]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "class",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/nil?": [
    {
      "namespace": "cljs.core",
      "weight": 6,
      "name": "identity",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/some?": null,
  "cljs.core/fn": [
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "defn",
      "arglists_comp": "[name doc-string? attr-map? [params*] body]|[name doc-string? attr-map? ([params*] body) + attr-map?]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/definline": null,
  "cljs.core/identity": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "nil?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/constantly": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "repeatedly",
      "arglists_comp": "[f]|[n f]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/memfn": null,
  "cljs.core/comp": [
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "partial",
      "arglists_comp": "[f arg1]|[f arg1 arg2]|[f arg1 arg2 arg3]|[f arg1 arg2 arg3 & more]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 4,
      "name": "juxt",
      "arglists_comp": "[f]|[f g]|[f g h]|[f g h & fs]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/complement": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "not",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/partial": [
    {
      "namespace": "cljs.core",
      "weight": 6,
      "name": "comp",
      "arglists_comp": "[f]|[f g]|[f g h]|[f1 f2 f3 & fs]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 4,
      "name": "juxt",
      "arglists_comp": "[f]|[f g]|[f g h]|[f g h & fs]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/juxt": [
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "partial",
      "arglists_comp": "[f arg1]|[f arg1 arg2]|[f arg1 arg2 arg3]|[f arg1 arg2 arg3 & more]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 6,
      "name": "comp",
      "arglists_comp": "[f]|[f g]|[f g h]|[f1 f2 f3 & fs]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/memoize": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "delay",
      "arglists_comp": "[& body]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/fnil": null,
  "cljs.core/every-pred": [
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "some-fn",
      "arglists_comp": "[p]|[p1 p2]|[p1 p2 p3]|[p1 p2 p3 & ps]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/some-fn": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "every-pred",
      "arglists_comp": "[p]|[p1 p2]|[p1 p2 p3]|[p1 p2 p3 & ps]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 7,
      "name": "some",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/apply": [
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "map",
      "arglists_comp": "[f coll]|[f c1 c2]|[f c1 c2 c3]|[f c1 c2 c3 & colls]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/->": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "->>",
      "arglists_comp": "[x form]|[x form & more]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/->>": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "->",
      "arglists_comp": "[x]|[x form]|[x form & more]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/as->": null,
  "cljs.core/cond->": null,
  "cljs.core/cond->>": null,
  "cljs.core/some->": null,
  "cljs.core/some->>": null,
  "cljs.core/fn?": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "ifn?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/ifn?": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "fn?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/+": null,
  "cljs.core/-": null,
  "cljs.core/*": null,
  "cljs.core/quot": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "rem",
      "arglists_comp": "[num div]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "mod",
      "arglists_comp": "[num div]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/rem": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "quot",
      "arglists_comp": "[num div]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "mod",
      "arglists_comp": "[num div]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/mod": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "rem",
      "arglists_comp": "[num div]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/inc": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "dec",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/dec": null,
  "cljs.core/max": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "max-key",
      "arglists_comp": "[k x]|[k x y]|[k x y & more]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "min",
      "arglists_comp": "[x]|[x y]|[x y & more]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/min": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "max",
      "arglists_comp": "[x]|[x y]|[x y & more]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "min-key",
      "arglists_comp": "[k x]|[k x y]|[k x y & more]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/=": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "==",
      "arglists_comp": "[x]|[x y]|[x y & more]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "not=",
      "arglists_comp": "[x]|[x y]|[x y & more]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "identical?",
      "arglists_comp": "[x y]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/==": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "=",
      "arglists_comp": "[x]|[x y]|[x y & more]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "identical?",
      "arglists_comp": "[x y]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/not=": null,
  "cljs.core/<": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "=",
      "arglists_comp": "[x]|[x y]|[x y & more]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "not=",
      "arglists_comp": "[x]|[x y]|[x y & more]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": ">",
      "arglists_comp": "[x]|[x y]|[x y & more]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "<=",
      "arglists_comp": "[x]|[x y]|[x y & more]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": ">=",
      "arglists_comp": "[x]|[x y]|[x y & more]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/>": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "=",
      "arglists_comp": "[x]|[x y]|[x y & more]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "not=",
      "arglists_comp": "[x]|[x y]|[x y & more]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "<",
      "arglists_comp": "[x]|[x y]|[x y & more]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/<=": null,
  "cljs.core/>=": null,
  "cljs.core/int": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "char",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "long",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "integer?",
      "arglists_comp": "[n]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 0,
      "name": "ints",
      "arglists_comp": "[xs]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "int-array",
      "arglists_comp": "[size-or-seq]|[size init-val-or-seq]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "short",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/zero?": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "pos?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "neg?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/pos?": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "neg?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "zero?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/neg?": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "pos?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "zero?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/even?": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "odd?",
      "arglists_comp": "[n]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/odd?": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "even?",
      "arglists_comp": "[n]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/number?": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "num",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/integer?": null,
  "cljs.core/rand": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "rand-int",
      "arglists_comp": "[n]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "rand-nth",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/rand-int": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "rand",
      "arglists_comp": "[]|[n]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "int",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/str": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "pr",
      "arglists_comp": "[]|[x]|[x & more]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 0,
      "name": "prn",
      "arglists_comp": "[& more]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/count": null,
  "cljs.core/get": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "map-indexed",
      "arglists_comp": "[f coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "get-in",
      "arglists_comp": "[m ks]|[m ks not-found]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "find",
      "arglists_comp": "[map key]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/subs": [
    {
      "namespace": "clojure.string",
      "weight": 2,
      "name": "replace",
      "arglists_comp": "[s match replacement]",
      "file": "clojure/string.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 2,
      "name": "split",
      "arglists_comp": "[s re]|[s re limit]",
      "file": "clojure/string.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 0,
      "name": "replace-first",
      "arglists_comp": "[s match replacement]",
      "file": "clojure/string.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "re-find",
      "arglists_comp": "[m]|[re s]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "re-seq",
      "arglists_comp": "[re s]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "re-matches",
      "arglists_comp": "[re s]",
      "file": "clojure/core.clj"
    }
  ],
  "clojure.string/join": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "split-at",
      "arglists_comp": "[n coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "split-with",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "interpose",
      "arglists_comp": "[sep coll]",
      "file": "clojure/core.clj"
    }
  ],
  "clojure.string/escape": null,
  "clojure.string/split": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "subs",
      "arglists_comp": "[s start]|[s start end]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 2,
      "name": "replace",
      "arglists_comp": "[s match replacement]",
      "file": "clojure/string.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "re-seq",
      "arglists_comp": "[re s]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 1,
      "name": "split-lines",
      "arglists_comp": "[s]",
      "file": "clojure/string.clj"
    }
  ],
  "clojure.string/split-lines": [
    {
      "namespace": "clojure.string",
      "weight": 2,
      "name": "split",
      "arglists_comp": "[s re]|[s re limit]",
      "file": "clojure/string.clj"
    }
  ],
  "clojure.string/replace": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "subs",
      "arglists_comp": "[s start]|[s start end]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 2,
      "name": "split",
      "arglists_comp": "[s re]|[s re limit]",
      "file": "clojure/string.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 0,
      "name": "replace-first",
      "arglists_comp": "[s match replacement]",
      "file": "clojure/string.clj"
    }
  ],
  "clojure.string/replace-first": [
    {
      "namespace": "clojure.string",
      "weight": 2,
      "name": "replace",
      "arglists_comp": "[s match replacement]",
      "file": "clojure/string.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "re-pattern",
      "arglists_comp": "[s]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "subs",
      "arglists_comp": "[s start]|[s start end]",
      "file": "clojure/core.clj"
    }
  ],
  "clojure.string/reverse": null,
  "cljs.core/re-find": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "re-groups",
      "arglists_comp": "[m]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "re-matcher",
      "arglists_comp": "[re s]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "re-pattern",
      "arglists_comp": "[s]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "re-seq",
      "arglists_comp": "[re s]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "re-matches",
      "arglists_comp": "[re s]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "subs",
      "arglists_comp": "[s start]|[s start end]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/re-seq": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "re-find",
      "arglists_comp": "[m]|[re s]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "re-groups",
      "arglists_comp": "[m]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "re-pattern",
      "arglists_comp": "[s]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "re-matcher",
      "arglists_comp": "[re s]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "re-matches",
      "arglists_comp": "[re s]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 2,
      "name": "split",
      "arglists_comp": "[s re]|[s re limit]",
      "file": "clojure/string.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "subs",
      "arglists_comp": "[s start]|[s start end]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/re-matches": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "re-find",
      "arglists_comp": "[m]|[re s]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "subs",
      "arglists_comp": "[s start]|[s start end]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/re-pattern": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "re-find",
      "arglists_comp": "[m]|[re s]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 2,
      "name": "replace",
      "arglists_comp": "[s match replacement]",
      "file": "clojure/string.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 0,
      "name": "replace-first",
      "arglists_comp": "[s match replacement]",
      "file": "clojure/string.clj"
    }
  ],
  "clojure.string/capitalize": [
    {
      "namespace": "clojure.string",
      "weight": 1,
      "name": "upper-case",
      "arglists_comp": "[s]",
      "file": "clojure/string.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 1,
      "name": "lower-case",
      "arglists_comp": "[s]",
      "file": "clojure/string.clj"
    }
  ],
  "clojure.string/lower-case": [
    {
      "namespace": "clojure.string",
      "weight": 1,
      "name": "upper-case",
      "arglists_comp": "[s]",
      "file": "clojure/string.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 1,
      "name": "capitalize",
      "arglists_comp": "[s]",
      "file": "clojure/string.clj"
    }
  ],
  "clojure.string/upper-case": [
    {
      "namespace": "clojure.string",
      "weight": 1,
      "name": "lower-case",
      "arglists_comp": "[s]",
      "file": "clojure/string.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 1,
      "name": "capitalize",
      "arglists_comp": "[s]",
      "file": "clojure/string.clj"
    }
  ],
  "clojure.string/trim": [
    {
      "namespace": "clojure.string",
      "weight": 1,
      "name": "triml",
      "arglists_comp": "[s]",
      "file": "clojure/string.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 1,
      "name": "trimr",
      "arglists_comp": "[s]",
      "file": "clojure/string.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 1,
      "name": "trim-newline",
      "arglists_comp": "[s]",
      "file": "clojure/string.clj"
    }
  ],
  "clojure.string/trim-newline": [
    {
      "namespace": "clojure.string",
      "weight": 1,
      "name": "trim",
      "arglists_comp": "[s]",
      "file": "clojure/string.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 1,
      "name": "triml",
      "arglists_comp": "[s]",
      "file": "clojure/string.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 1,
      "name": "trimr",
      "arglists_comp": "[s]",
      "file": "clojure/string.clj"
    }
  ],
  "clojure.string/triml": [
    {
      "namespace": "clojure.string",
      "weight": 1,
      "name": "trim",
      "arglists_comp": "[s]",
      "file": "clojure/string.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 1,
      "name": "trim-newline",
      "arglists_comp": "[s]",
      "file": "clojure/string.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 1,
      "name": "trimr",
      "arglists_comp": "[s]",
      "file": "clojure/string.clj"
    }
  ],
  "clojure.string/trimr": [
    {
      "namespace": "clojure.string",
      "weight": 1,
      "name": "trim",
      "arglists_comp": "[s]",
      "file": "clojure/string.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 1,
      "name": "triml",
      "arglists_comp": "[s]",
      "file": "clojure/string.clj"
    }
  ],
  "cljs.core/char": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "char?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "int",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 0,
      "name": "chars",
      "arglists_comp": "[xs]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "char-array",
      "arglists_comp": "[size-or-seq]|[size init-val-or-seq]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/string?": null,
  "clojure.string/blank?": null,
  "cljs.core/atom": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "reset!",
      "arglists_comp": "[atom newval]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "swap!",
      "arglists_comp": "[atom f]|[atom f x]|[atom f x y]|[atom f x y & args]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "compare-and-set!",
      "arglists_comp": "[atom oldval newval]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "add-watch",
      "arglists_comp": "[reference key fn]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 0,
      "name": "remove-watch",
      "arglists_comp": "[reference key]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 0,
      "name": "set-validator!",
      "arglists_comp": "[iref validator-fn]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/deref": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "atom",
      "arglists_comp": "[x]|[x & options]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "agent",
      "arglists_comp": "[state & options]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "ref",
      "arglists_comp": "[x]|[x & options]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/swap!": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "atom",
      "arglists_comp": "[x]|[x & options]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "reset!",
      "arglists_comp": "[atom newval]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/reset!": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "swap!",
      "arglists_comp": "[atom f]|[atom f x]|[atom f x y]|[atom f x y & args]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "compare-and-set!",
      "arglists_comp": "[atom oldval newval]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "atom",
      "arglists_comp": "[x]|[x & options]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/compare-and-set!": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "atom",
      "arglists_comp": "[x]|[x & options]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "reset!",
      "arglists_comp": "[atom newval]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "swap!",
      "arglists_comp": "[atom f]|[atom f x]|[atom f x y]|[atom f x y & args]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/add-watch": [
    {
      "namespace": "cljs.core",
      "weight": 0,
      "name": "remove-watch",
      "arglists_comp": "[reference key]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/remove-watch": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "add-watch",
      "arglists_comp": "[reference key fn]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/set-validator!": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "atom",
      "arglists_comp": "[x]|[x & options]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "agent",
      "arglists_comp": "[state & options]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "ref",
      "arglists_comp": "[x]|[x & options]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/get-validator": null,
  "cljs.core/js-obj": null,
  "cljs.core/array": null,
  "cljs.core/make-array": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "int-array",
      "arglists_comp": "[size-or-seq]|[size init-val-or-seq]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "double-array",
      "arglists_comp": "[size-or-seq]|[size init-val-or-seq]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "float-array",
      "arglists_comp": "[size-or-seq]|[size init-val-or-seq]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "short-array",
      "arglists_comp": "[size-or-seq]|[size init-val-or-seq]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "long-array",
      "arglists_comp": "[size-or-seq]|[size init-val-or-seq]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "char-array",
      "arglists_comp": "[size-or-seq]|[size init-val-or-seq]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "byte-array",
      "arglists_comp": "[size-or-seq]|[size init-val-or-seq]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "boolean-array",
      "arglists_comp": "[size-or-seq]|[size init-val-or-seq]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "object-array",
      "arglists_comp": "[size-or-seq]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "to-array",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "to-array-2d",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "into-array",
      "arglists_comp": "[aseq]|[type aseq]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "aget",
      "arglists_comp": "[array idx]|[array idx & idxs]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "aset",
      "arglists_comp": "[array idx val]|[array idx idx2 & idxv]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "alength",
      "arglists_comp": "[array]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "amap",
      "arglists_comp": "[a idx ret expr]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "areduce",
      "arglists_comp": "[a idx ret init expr]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/aclone": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "aget",
      "arglists_comp": "[array idx]|[array idx & idxs]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/aget": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "aclone",
      "arglists_comp": "[array]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "get",
      "arglists_comp": "[map key]|[map key not-found]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "nth",
      "arglists_comp": "[coll index]|[coll index not-found]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/set!": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "reset!",
      "arglists_comp": "[atom newval]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "binding",
      "arglists_comp": "[bindings & body]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "alter-var-root",
      "arglists_comp": "[v f & args]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/aset": null,
  "cljs.core/clj->js": null,
  "cljs.core/js->clj": null,
  "cljs.core/array?": null,
  "cljs.core/object?": null,
  "cljs.core/try": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "catch",
      "arglists_comp": "",
      "file": null
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "finally",
      "arglists_comp": "",
      "file": null
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "throw",
      "arglists_comp": "",
      "file": null
    }
  ],
  "cljs.core/catch": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "try",
      "arglists_comp": "",
      "file": null
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "finally",
      "arglists_comp": "",
      "file": null
    }
  ],
  "cljs.core/finally": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "try",
      "arglists_comp": "",
      "file": null
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "catch",
      "arglists_comp": "",
      "file": null
    }
  ],
  "cljs.core/throw": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "try",
      "arglists_comp": "",
      "file": null
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "catch",
      "arglists_comp": "",
      "file": null
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "finally",
      "arglists_comp": "",
      "file": null
    }
  ],
  "cljs.core/empty": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "not-empty",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/not-empty": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "empty",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/into": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "conj",
      "arglists_comp": "[coll x]|[coll x & xs]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/conj": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "cons",
      "arglists_comp": "[x seq]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "into",
      "arglists_comp": "[to from]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "peek",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "pop",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/distinct?": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "distinct",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/empty?": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "seq",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/every?": [
    {
      "namespace": "cljs.core",
      "weight": 7,
      "name": "some",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "not-any?",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/not-every?": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "every?",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "not-any?",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 7,
      "name": "some",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/some": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "every?",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "not-any?",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "keep",
      "arglists_comp": "[f coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "keep-indexed",
      "arglists_comp": "[f coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "some-fn",
      "arglists_comp": "[p]|[p1 p2]|[p1 p2 p3]|[p1 p2 p3 & ps]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/not-any?": [
    {
      "namespace": "cljs.core",
      "weight": 7,
      "name": "some",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "every?",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/sequential?": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "seq?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "coll?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/associative?": null,
  "cljs.core/sorted?": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sorted-map",
      "arglists_comp": "[& keyvals]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sorted-set",
      "arglists_comp": "[& keys]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/counted?": null,
  "cljs.core/reversible?": null,
  "cljs.core/coll?": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "seq?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "list?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sequential?",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/list?": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "seq?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sequential?",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "coll?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/vector?": null,
  "cljs.core/set?": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "set",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/map?": null,
  "cljs.core/seq?": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "seq",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sequential?",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "vector?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "coll?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "list?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "map?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "set?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/list": null,
  "cljs.core/list*": null,
  "cljs.core/first": [
    {
      "namespace": "cljs.core",
      "weight": 4,
      "name": "rest",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "next",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "nth",
      "arglists_comp": "[coll index]|[coll index not-found]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "second",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "take",
      "arglists_comp": "[n coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "ffirst",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/nth": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "first",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "second",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "nthnext",
      "arglists_comp": "[coll n]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "get",
      "arglists_comp": "[map key]|[map key not-found]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/peek": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "first",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "pop",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "conj",
      "arglists_comp": "[coll x]|[coll x & xs]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/cons": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "conj",
      "arglists_comp": "[coll x]|[coll x & xs]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/rest": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "next",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "first",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "drop",
      "arglists_comp": "[n coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "pop",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/pop": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "peek",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 4,
      "name": "rest",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "conj",
      "arglists_comp": "[coll x]|[coll x & xs]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/vector": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "vec",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "vector?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "vector-of",
      "arglists_comp": "[t]",
      "file": "clojure/gvec.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "pop",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "into",
      "arglists_comp": "[to from]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/vec": [
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "vector",
      "arglists_comp": "[]|[a]|[a b]|[a b c]|[a b c d]|[a b c d & args]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "vector?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "vector-of",
      "arglists_comp": "[t]",
      "file": "clojure/gvec.clj"
    }
  ],
  "cljs.core/assoc": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "assoc-in",
      "arglists_comp": "[m [k & ks] v]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "dissoc",
      "arglists_comp": "[map]|[map key]|[map key & ks]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "merge",
      "arglists_comp": "[& maps]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/subvec": [
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "vector",
      "arglists_comp": "[]|[a]|[a b]|[a b c]|[a b c d]|[a b c d & args]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "vector?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/replace": [
    {
      "namespace": "clojure.walk",
      "weight": 1,
      "name": "prewalk-replace",
      "arglists_comp": "[smap form]",
      "file": "clojure/walk.clj"
    },
    {
      "namespace": "clojure.walk",
      "weight": 0,
      "name": "postwalk-replace",
      "arglists_comp": "[smap form]",
      "file": "clojure/walk.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "map",
      "arglists_comp": "[f coll]|[f c1 c2]|[f c1 c2 c3]|[f c1 c2 c3 & colls]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/rseq": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "reverse",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/mapv": null,
  "cljs.core/filterv": null,
  "cljs.core/reduce-kv": null,
  "cljs.core/set": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "hash-set",
      "arglists_comp": "[]|[& keys]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sorted-set",
      "arglists_comp": "[& keys]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "conj",
      "arglists_comp": "[coll x]|[coll x & xs]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 1,
      "name": "join",
      "arglists_comp": "[xrel yrel]|[xrel yrel km]",
      "file": "clojure/set.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 1,
      "name": "select",
      "arglists_comp": "[pred xset]",
      "file": "clojure/set.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 2,
      "name": "difference",
      "arglists_comp": "[s1]|[s1 s2]|[s1 s2 & sets]",
      "file": "clojure/set.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 1,
      "name": "intersection",
      "arglists_comp": "[s1]|[s1 s2]|[s1 s2 & sets]",
      "file": "clojure/set.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 1,
      "name": "union",
      "arglists_comp": "[]|[s1]|[s1 s2]|[s1 s2 & sets]",
      "file": "clojure/set.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 1,
      "name": "index",
      "arglists_comp": "[xrel ks]",
      "file": "clojure/set.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 1,
      "name": "project",
      "arglists_comp": "[xrel ks]",
      "file": "clojure/set.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 1,
      "name": "rename",
      "arglists_comp": "[xrel kmap]",
      "file": "clojure/set.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 2,
      "name": "rename-keys",
      "arglists_comp": "[map kmap]",
      "file": "clojure/set.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 1,
      "name": "map-invert",
      "arglists_comp": "[m]",
      "file": "clojure/set.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "disj",
      "arglists_comp": "[set]|[set key]|[set key & ks]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "distinct",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/hash-set": null,
  "cljs.core/sorted-set": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sorted-set-by",
      "arglists_comp": "[comparator & keys]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "subseq",
      "arglists_comp": "[sc test key]|[sc start-test start-key end-test end-key]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "rsubseq",
      "arglists_comp": "[sc test key]|[sc start-test start-key end-test end-key]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sorted-map",
      "arglists_comp": "[& keyvals]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/sorted-set-by": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sorted-set",
      "arglists_comp": "[& keys]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sorted-map-by",
      "arglists_comp": "[comparator & keyvals]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "compare",
      "arglists_comp": "[x y]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/contains?": [
    {
      "namespace": "cljs.core",
      "weight": 7,
      "name": "some",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "get",
      "arglists_comp": "[map key]|[map key not-found]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/disj": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "dissoc",
      "arglists_comp": "[map]|[map key]|[map key & ks]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "disj!",
      "arglists_comp": "[set]|[set key]|[set key & ks]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 2,
      "name": "difference",
      "arglists_comp": "[s1]|[s1 s2]|[s1 s2 & sets]",
      "file": "clojure/set.clj"
    }
  ],
  "clojure.set/union": [
    {
      "namespace": "clojure.set",
      "weight": 1,
      "name": "intersection",
      "arglists_comp": "[s1]|[s1 s2]|[s1 s2 & sets]",
      "file": "clojure/set.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 2,
      "name": "difference",
      "arglists_comp": "[s1]|[s1 s2]|[s1 s2 & sets]",
      "file": "clojure/set.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 0,
      "name": "superset?",
      "arglists_comp": "[set1 set2]",
      "file": "clojure/set.clj"
    }
  ],
  "clojure.set/difference": [
    {
      "namespace": "clojure.set",
      "weight": 1,
      "name": "union",
      "arglists_comp": "[]|[s1]|[s1 s2]|[s1 s2 & sets]",
      "file": "clojure/set.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 1,
      "name": "intersection",
      "arglists_comp": "[s1]|[s1 s2]|[s1 s2 & sets]",
      "file": "clojure/set.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 0,
      "name": "superset?",
      "arglists_comp": "[set1 set2]",
      "file": "clojure/set.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 1,
      "name": "project",
      "arglists_comp": "[xrel ks]",
      "file": "clojure/set.clj"
    }
  ],
  "clojure.set/intersection": [
    {
      "namespace": "clojure.set",
      "weight": 1,
      "name": "union",
      "arglists_comp": "[]|[s1]|[s1 s2]|[s1 s2 & sets]",
      "file": "clojure/set.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 2,
      "name": "difference",
      "arglists_comp": "[s1]|[s1 s2]|[s1 s2 & sets]",
      "file": "clojure/set.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 0,
      "name": "superset?",
      "arglists_comp": "[set1 set2]",
      "file": "clojure/set.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 1,
      "name": "project",
      "arglists_comp": "[xrel ks]",
      "file": "clojure/set.clj"
    }
  ],
  "clojure.set/select": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "filter",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    }
  ],
  "clojure.set/subset?": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "set?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "set",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "clojure.set",
      "weight": 0,
      "name": "superset?",
      "arglists_comp": "[set1 set2]",
      "file": "clojure/set.clj"
    }
  ],
  "clojure.set/superset?": [
    {
      "namespace": "clojure.set",
      "weight": 1,
      "name": "subset?",
      "arglists_comp": "[set1 set2]",
      "file": "clojure/set.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "set",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/hash-map": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "merge",
      "arglists_comp": "[& maps]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "assoc",
      "arglists_comp": "[map key val]|[map key val & kvs]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "dissoc",
      "arglists_comp": "[map]|[map key]|[map key & ks]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "array-map",
      "arglists_comp": "[]|[& keyvals]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sorted-map",
      "arglists_comp": "[& keyvals]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/array-map": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "assoc",
      "arglists_comp": "[map key val]|[map key val & kvs]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "hash-map",
      "arglists_comp": "[]|[& keyvals]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sorted-map",
      "arglists_comp": "[& keyvals]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/zipmap": [
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "interleave",
      "arglists_comp": "[c1 c2]|[c1 c2 & colls]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/sorted-map": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sorted-map-by",
      "arglists_comp": "[comparator & keyvals]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "subseq",
      "arglists_comp": "[sc test key]|[sc start-test start-key end-test end-key]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "rsubseq",
      "arglists_comp": "[sc test key]|[sc start-test start-key end-test end-key]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sorted-set",
      "arglists_comp": "[& keys]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "array-map",
      "arglists_comp": "[]|[& keyvals]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "hash-map",
      "arglists_comp": "[]|[& keyvals]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/sorted-map-by": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sorted-map",
      "arglists_comp": "[& keyvals]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "subseq",
      "arglists_comp": "[sc test key]|[sc start-test start-key end-test end-key]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "rsubseq",
      "arglists_comp": "[sc test key]|[sc start-test start-key end-test end-key]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sorted-set-by",
      "arglists_comp": "[comparator & keys]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/frequencies": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "group-by",
      "arglists_comp": "[f coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "distinct",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/group-by": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "partition-by",
      "arglists_comp": "[f coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "frequencies",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/get-in": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "assoc-in",
      "arglists_comp": "[m [k & ks] v]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "update-in",
      "arglists_comp": "[m [k & ks] f & args]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "find",
      "arglists_comp": "[map key]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "get",
      "arglists_comp": "[map key]|[map key not-found]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/find": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "get",
      "arglists_comp": "[map key]|[map key not-found]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "get-in",
      "arglists_comp": "[m ks]|[m ks not-found]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/keys": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "vals",
      "arglists_comp": "[map]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "hash-map",
      "arglists_comp": "[]|[& keyvals]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "key",
      "arglists_comp": "[e]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "defn",
      "arglists_comp": "[name doc-string? attr-map? [params*] body]|[name doc-string? attr-map? ([params*] body) + attr-map?]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/vals": [
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "val",
      "arglists_comp": "[e]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "keys",
      "arglists_comp": "[map]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/assoc-in": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "assoc",
      "arglists_comp": "[map key val]|[map key val & kvs]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "update-in",
      "arglists_comp": "[m [k & ks] f & args]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "dissoc-in",
      "arglists_comp": "[m [k & ks :as keys]]",
      "file": "clojure/contrib/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "get-in",
      "arglists_comp": "[m ks]|[m ks not-found]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/dissoc": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "assoc",
      "arglists_comp": "[map key val]|[map key val & kvs]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "dissoc-in",
      "arglists_comp": "[m [k & ks :as keys]]",
      "file": "clojure/contrib/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "disj",
      "arglists_comp": "[set]|[set key]|[set key & ks]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "select-keys",
      "arglists_comp": "[map keyseq]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/merge": [
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "merge-with",
      "arglists_comp": "[f & maps]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "hash-map",
      "arglists_comp": "[]|[& keyvals]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/merge-with": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "merge",
      "arglists_comp": "[& maps]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/select-keys": null,
  "cljs.core/update-in": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "assoc-in",
      "arglists_comp": "[m [k & ks] v]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "get-in",
      "arglists_comp": "[m ks]|[m ks not-found]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "fnil",
      "arglists_comp": "[f x]|[f x y]|[f x y z]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/key": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "keys",
      "arglists_comp": "[map]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/val": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "vals",
      "arglists_comp": "[map]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/subseq": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "rsubseq",
      "arglists_comp": "[sc test key]|[sc start-test start-key end-test end-key]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sorted-map",
      "arglists_comp": "[& keyvals]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sorted-set",
      "arglists_comp": "[& keys]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sorted-map-by",
      "arglists_comp": "[comparator & keyvals]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sorted-set-by",
      "arglists_comp": "[comparator & keys]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/rsubseq": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "subseq",
      "arglists_comp": "[sc test key]|[sc start-test start-key end-test end-key]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/distinct": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "distinct?",
      "arglists_comp": "[x]|[x y]|[x y & more]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/filter": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "remove",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "keep",
      "arglists_comp": "[f coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/remove": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "filter",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/take-nth": null,
  "cljs.core/concat": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "conj",
      "arglists_comp": "[coll x]|[coll x & xs]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "into",
      "arglists_comp": "[to from]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/lazy-cat": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "lazy-seq",
      "arglists_comp": "[& body]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "concat",
      "arglists_comp": "[]|[x]|[x y]|[x y & zs]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/mapcat": [
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "map",
      "arglists_comp": "[f coll]|[f c1 c2]|[f c1 c2 c3]|[f c1 c2 c3 & colls]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "concat",
      "arglists_comp": "[]|[x]|[x y]|[x y & zs]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/cycle": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "lazy-seq",
      "arglists_comp": "[& body]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/interleave": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "interpose",
      "arglists_comp": "[sep coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "zipmap",
      "arglists_comp": "[keys vals]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/interpose": [
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "interleave",
      "arglists_comp": "[c1 c2]|[c1 c2 & colls]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 2,
      "name": "join",
      "arglists_comp": "[coll]|[separator [x & more]]",
      "file": "clojure/string.clj"
    }
  ],
  "cljs.core/nthrest": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "drop",
      "arglists_comp": "[n coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "nthnext",
      "arglists_comp": "[coll n]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "nth",
      "arglists_comp": "[coll index]|[coll index not-found]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/next": [
    {
      "namespace": "cljs.core",
      "weight": 4,
      "name": "rest",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "first",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "fnext",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/fnext": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "ffirst",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "second",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/nnext": null,
  "cljs.core/drop": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "take",
      "arglists_comp": "[n coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "drop-last",
      "arglists_comp": "[s]|[n s]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "drop-while",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "nthnext",
      "arglists_comp": "[coll n]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "nthrest",
      "arglists_comp": "[coll n]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/drop-while": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "take-while",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "split-with",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/take-last": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "last",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "butlast",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "drop-last",
      "arglists_comp": "[s]|[n s]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/take": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "drop",
      "arglists_comp": "[n coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "take-while",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "take-last",
      "arglists_comp": "[n coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "take-nth",
      "arglists_comp": "[n coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/take-while": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "drop-while",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "split-with",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/butlast": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "first",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 4,
      "name": "rest",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "last",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "next",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "drop-last",
      "arglists_comp": "[s]|[n s]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "take-last",
      "arglists_comp": "[n coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/drop-last": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "drop",
      "arglists_comp": "[n coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "drop-while",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/flatten": null,
  "cljs.core/partition": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "partition-all",
      "arglists_comp": "[n coll]|[n step coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "split-at",
      "arglists_comp": "[n coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "partition-by",
      "arglists_comp": "[f coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/partition-all": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "partition",
      "arglists_comp": "[n coll]|[n step coll]|[n step pad coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "partition-by",
      "arglists_comp": "[f coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/partition-by": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "partition",
      "arglists_comp": "[n coll]|[n step coll]|[n step pad coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "partition-all",
      "arglists_comp": "[n coll]|[n step coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "group-by",
      "arglists_comp": "[f coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/split-at": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "split-with",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 2,
      "name": "split",
      "arglists_comp": "[s re]|[s re limit]",
      "file": "clojure/string.clj"
    }
  ],
  "cljs.core/split-with": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "split-at",
      "arglists_comp": "[n coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "clojure.string",
      "weight": 2,
      "name": "split",
      "arglists_comp": "[s re]|[s re limit]",
      "file": "clojure/string.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "take-while",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "drop-while",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/shuffle": null,
  "cljs.core/reverse": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "rseq",
      "arglists_comp": "[rev]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/sort": [
    {
      "namespace": "cljs.core",
      "weight": 4,
      "name": "sort-by",
      "arglists_comp": "[keyfn coll]|[keyfn comp coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/sort-by": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "sort",
      "arglists_comp": "[coll]|[comp coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "compare",
      "arglists_comp": "[x y]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/compare": [
    {
      "namespace": "cljs.core",
      "weight": 4,
      "name": "sort-by",
      "arglists_comp": "[keyfn coll]|[keyfn comp coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sorted-set-by",
      "arglists_comp": "[comparator & keys]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "sorted-map-by",
      "arglists_comp": "[comparator & keyvals]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/pmap": [
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "map",
      "arglists_comp": "[f coll]|[f c1 c2]|[f c1 c2 c3]|[f c1 c2 c3 & colls]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "future",
      "arglists_comp": "[& body]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/seque": null,
  "cljs.core/second": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "first",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "nth",
      "arglists_comp": "[coll index]|[coll index not-found]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "fnext",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "next",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/last": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "first",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "next",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 4,
      "name": "rest",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "butlast",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "take-last",
      "arglists_comp": "[n coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/ffirst": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "first",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "fnext",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "nfirst",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/nfirst": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "next",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/nthnext": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "nth",
      "arglists_comp": "[coll index]|[coll index not-found]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "drop",
      "arglists_comp": "[n coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "nthrest",
      "arglists_comp": "[coll n]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/rand-nth": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "rand",
      "arglists_comp": "[]|[n]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/max-key": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "max",
      "arglists_comp": "[x]|[x y]|[x y & more]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "min-key",
      "arglists_comp": "[k x]|[k x y]|[k x y & more]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/min-key": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "min",
      "arglists_comp": "[x]|[x y]|[x y & more]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "max-key",
      "arglists_comp": "[k x]|[k x y]|[k x y & more]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/reductions": [
    {
      "namespace": "cljs.core",
      "weight": 5,
      "name": "reduce",
      "arglists_comp": "[f coll]|[f val coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/into-array": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "to-array",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "make-array",
      "arglists_comp": "[type len]|[type dim & more-dims]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/to-array-2d": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "to-array",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/dorun": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "doall",
      "arglists_comp": "[coll]|[n coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/doall": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "dorun",
      "arglists_comp": "[coll]|[n coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 5,
      "name": "doseq",
      "arglists_comp": "[seq-exprs & body]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/realized?": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "promise",
      "arglists_comp": "[]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "delay",
      "arglists_comp": "[& body]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "future",
      "arglists_comp": "[& body]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/seq": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "seq?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "empty?",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "iterator-seq",
      "arglists_comp": "[iter]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/lazy-seq": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "lazy-cat",
      "arglists_comp": "[& colls]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "realized?",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "doall",
      "arglists_comp": "[coll]|[n coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "iterate",
      "arglists_comp": "[f x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/repeatedly": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "repeat",
      "arglists_comp": "[x]|[n x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "iterate",
      "arglists_comp": "[f x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "lazy-seq",
      "arglists_comp": "[& body]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "dotimes",
      "arglists_comp": "[bindings & body]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "doall",
      "arglists_comp": "[coll]|[n coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "rand-int",
      "arglists_comp": "[n]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "constantly",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/iterate": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "cycle",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "repeatedly",
      "arglists_comp": "[f]|[n f]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "repeat",
      "arglists_comp": "[x]|[n x]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/repeat": [
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "repeatedly",
      "arglists_comp": "[f]|[n f]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "cycle",
      "arglists_comp": "[coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 2,
      "name": "constantly",
      "arglists_comp": "[x]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "dotimes",
      "arglists_comp": "[bindings & body]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/range": null,
  "cljs.core/tree-seq": null,
  "cljs.core/keep": [
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "keep-indexed",
      "arglists_comp": "[f coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "map",
      "arglists_comp": "[f coll]|[f c1 c2]|[f c1 c2 c3]|[f c1 c2 c3 & colls]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "filter",
      "arglists_comp": "[pred coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/keep-indexed": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "map-indexed",
      "arglists_comp": "[f coll]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 3,
      "name": "keep",
      "arglists_comp": "[f coll]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/bit-and": null,
  "cljs.core/bit-or": null,
  "cljs.core/bit-xor": null,
  "cljs.core/bit-not": null,
  "cljs.core/bit-flip": null,
  "cljs.core/bit-set": null,
  "cljs.core/bit-shift-right": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "bit-shift-left",
      "arglists_comp": "[x n]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "bit-xor",
      "arglists_comp": "[x y]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "bit-or",
      "arglists_comp": "[x y]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "bit-and",
      "arglists_comp": "[x y]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "bit-set",
      "arglists_comp": "[x n]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "bit-test",
      "arglists_comp": "[x n]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "bit-flip",
      "arglists_comp": "[x n]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "bit-and-not",
      "arglists_comp": "[x y]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "bit-clear",
      "arglists_comp": "[x n]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/bit-shift-left": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "bit-shift-left",
      "arglists_comp": "[x n]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/bit-and-not": null,
  "cljs.core/bit-clear": null,
  "cljs.core/bit-test": [
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "bit-set",
      "arglists_comp": "[x n]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "bit-shift-left",
      "arglists_comp": "[x n]",
      "file": "clojure/core.clj"
    },
    {
      "namespace": "cljs.core",
      "weight": 1,
      "name": "bit-xor",
      "arglists_comp": "[x y]",
      "file": "clojure/core.clj"
    }
  ],
  "cljs.core/unsigned-bit-shift-right": null
}